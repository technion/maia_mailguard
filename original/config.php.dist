<?php
    /*
     * $Id: config.php.dist 1549 2011-06-20 12:15:14Z rjl $
     *
     * MAIA MAILGUARD LICENSE v.1.0
     *
     * Copyright 2004 by Robert LeBlanc <rjl@renaissoft.com>
     *                   David Morton   <mortonda@dgrmm.net>
     * All rights reserved.
     *
     * PREAMBLE
     *
     * This License is designed for users of Maia Mailguard
     * ("the Software") who wish to support the Maia Mailguard project by
     * leaving "Maia Mailguard" branding information in the HTML output
     * of the pages generated by the Software, and providing links back
     * to the Maia Mailguard home page.  Users who wish to remove this
     * branding information should contact the copyright owner to obtain
     * a Rebranding License.
     *
     * DEFINITION OF TERMS
     *
     * The "Software" refers to Maia Mailguard, including all of the
     * associated PHP, Perl, and SQL scripts, documentation files, graphic
     * icons and logo images.
     *
     * GRANT OF LICENSE
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions
     * are met:
     *
     * 1. Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright
     *    notice, this list of conditions and the following disclaimer in the
     *    documentation and/or other materials provided with the distribution.
     *
     * 3. The end-user documentation included with the redistribution, if
     *    any, must include the following acknowledgment:
     *
     *    "This product includes software developed by Robert LeBlanc
     *    <rjl@renaissoft.com>."
     *
     *    Alternately, this acknowledgment may appear in the software itself,
     *    if and wherever such third-party acknowledgments normally appear.
     *
     * 4. At least one of the following branding conventions must be used:
     *
     *    a. The Maia Mailguard logo appears in the page-top banner of
     *       all HTML output pages in an unmodified form, and links
     *       directly to the Maia Mailguard home page; or
     *
     *    b. The "Powered by Maia Mailguard" graphic appears in the HTML
     *       output of all gateway pages that lead to this software,
     *       linking directly to the Maia Mailguard home page; or
     *
     *    c. A separate Rebranding License is obtained from the copyright
     *       owner, exempting the Licensee from 4(a) and 4(b), subject to
     *       the additional conditions laid out in that license document.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
     * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
     * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
     * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
     * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
     * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
     * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
     * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     */

    // These names may be misleading, but for now...
    //Possible levels:  LOG_DEBUG, LOG_INFO, LOG_NOTICE, LOG_WARNING, LOG_ERR ...
    $loglevel = PEAR_LOG_DEBUG;            // messages >= this level are sent to php log
    
    $debug_popup = false;                   // allow a debug popup to be shown
    $debuglevel = PEAR_LOG_DEBUG;            // messages >= this level are displayed in popup window


    // Language to use for text display (en, fr, ja, de, etc.).
    // Locale-specific language files should be installed
    // under ./locale/<lang>.  ./local/en (English) is provided
    // by default; translations to other languages may be
    // provided by other parties in the future.  Visit the
    // Maia Mailguard website for more details about "supplemental
    // files" (http://www.renaissoft.com/maia/download.html).
    $default_display_language = "en";


    // Set your timezone here
    date_default_timezone_set("America/Los_Angeles"); 


    // Default character set is UTF-8 ... hardcoded but if you really have a good reason to change it
    // go ahead and try.
    //$html_charset = "UTF-8";
    
    // Default session timeout - since we can't always trust the php installation to 
    // expire session cookies.  (in minutes)
    $default_session_timeout = 15;  // 15 minute default
    
    // Compression support:  php can gzip the output which saves bandwidth
    // at the expense of more cpu time.  Uncomment this line to enable.
    // see http://us2.php.net/ob_gzhandler for more details
    // ob_start("ob_gzhandler");

    // Supported databases include:
    //
    // "mysql"   (MySQL)
    // "pgsql"   (PostgreSQL)
    // "ibase"   (InterBase)
    // "dbase"   (dBase)
    // "msql"    (Mini SQL)
    // "mssql"   (Microsoft SQL Server)
    // "oci8"    (Oracle 7/8/8i)
    // "odbc"    (ODBC (Open Database Connectivity))
    // "sybase"  (SyBase)
    // "sqlite"  (SQLite)
    // "ifx"     (Informix)
    // "fbsql"   (FrontBase)
    //
    // For more detailed information on the DSN syntax, see
    // http://pear.php.net/manual/en/package.database.db.intro-dsn.php

    //$maia_sql_dsn = "dbtype://dbuser:passwd@tcp(hostname:port)/maia";
    $maia_sql_dsn = "mysql://maia:password@tcp(localhost:3306)/maia";
    //$maia_sql_dsn = "mysql://dbuser:passwd@unix(/var/tmp/mysql.sock)/maia";
    //$maia_sql_dsn = "mysql://dbuser:passwd/maia";
    
    // To pass more options into DB:connect, set them in this array
    // For more details, see:
    // http://pear.php.net/manual/en/package.database.db.db-common.setoption.php
    // $maia_sql_connect_options = array();
    // $maia_sql_connect_options = array('persistent' => true);  // For persistent connections

    // To improve performace with the html purifier, set purifier_cache to a directory the web server can write to.
    $purifier_cache = '/var/www/cache';


	// Default protection level
    // Level = virus_lover,spam_lover,banned_files_lover,bad_header_lover,bypass_virus_checks,
	//         bypass_spam_checks,bypass_banned_checks,bypass_header_checks,discard_viruses, discard_spam,
	//         discard_banned_files,discard_bad_headers, spam_modifies_subj, 
	//         spam_tag_level, spam_tag2_level, spam_kill_level
	// Original levels:
	//   No Protection at all:
	//                    'off'     => array ('Y','Y','Y','Y','Y','Y','Y','Y','N','N','N','N','N','999','999','999'),
	//   Virus protection only:
	//                    'low'     => array ('N','Y','Y','Y','N','Y','Y','Y','N','N','N','N','N','999','999','999'),
	//   Spam is marked at level 5, but not quarantined, attachments and bad headers allowed:
    //                    'medium'  => array ('N','N','Y','Y','N','N','Y','Y','N','N','N','N','Y','5','999','999'),
	//   Spam is marked at level 1, and quarantined at level 5; attachments, bad headers, and viruses are quarantined
    //                    'high'    => array ('N','N','N','N','N','N','N','N','N','N','N','N','N','1','5','5')
	
	$protection = array( 'off'     => array ('Y','Y','Y','Y','Y','Y','Y','Y','N','N','N','N','N','999','999','999'),
                         'low'     => array ('N','Y','Y','Y','N','Y','Y','Y','N','N','N','N','N','999','999','999'),
                         'medium'  => array ('N','N','Y','Y','N','N','Y','Y','N','N','N','N','Y','5','999','999'),
                         'high'    => array ('N','N','N','N','N','N','N','N','N','N','N','N','N','1','5','5')
	);
	
	
	
  // Chart font to use.  The location and availability of truetype fonts varies from system to 
	// system.  if the font path is set up right, all you have to do is specify the name of the font
	// without the extension. Leaving it blank seems to pick a default font.
	
	$chart_font = '';
	//$chart_font = 'coolveti';
	
	// Optional Smarty include path.  The usual location for Smarty template libs is in the "Smarty/" folder
	// under the default include path or in libs/Smarty/, but some distros such as Debian 
	// tend to come up with other ideas.
	// $smarty_path = "/usr/share/php/smarty/libs";
	
	
	
    // The format your mail server uses to rewrite your e-mail address
    // when it receives it from your MTA-RX.  Some mail servers handle
    // virtual domains by requiring your MTA-RX to mangle the e-mail
    // addresses themselves.  Look at your amavisd-new logs to see how
    // e-mail addresses look when mail arrives, and choose the format
    // below that matches what your mail server wants:
    //
    //    0: user@domain (e.g. joe@example.com)
    //       Select this option if your MTA-RX leaves your e-mail addresses
    //       unchanged, i.e. mail to joe@example.com arrives in amavisd's
    //       logs as joe@example.com.
    //
    //    1: user.virtualdomain@routingdomain (e.g. joe.example.com@myisp.net)
    //       In this version, the original e-mail address is "dotted" and
    //       used as the "user" portion of a user@domain address, with
    //       the main or ISP's domain indicating where the mail traffic
    //       should be directed.
   //
    //    2: user_virtualdomain@routingdomain (e.g. joe_example_com@myisp.net)
    //       Similar to (1), except with underscores instead of periods.
    //
    //    3: user@virtualdomain@routingdomain (e.g. joe@example.com@myisp.net)
    //
    //    4: user@domain, like (0) above, but with the e-mail address
    //       used as the username (e.g username is the same as the
    //       e-mail address, and no routing domain is appended).
    //
    //    5: user@routingdomain (e.g. joe@[127.0.0.1]).  The domain
    //       portion is your mail server's routing domain, but the
    //       user portion is unchanged.
    //
    $address_rewriting_type = 0;


    // If $address_rewriting_type is not 0, this routing domain will
    // be used as the "domain" portion of a user@domain address.
    $routing_domain = "";


    // Select an authentication method from one of the following:
    //
    //    "pop3"     - use a POP3 server to authenticate
    //    "imap"     - use an IMAP server to authenticate
    //    "ldap"     - use an LDAP server to authenticate
    //    "exchange" - use an Exchange Server to authenticate
    //    "sql"      - use a SQL database server to authenticate
    //    "internal" - use Maia's internal SQL database to authenticate
    $auth_method = "internal";


    // *** AUTHENTICATING VIA POP3 ***
    //
    // POP3 support is provided by the Net_POP3 PEAR module 
    // http://pear.php.net/package/Net_POP3
    // If you need ssl support, set the port to 995 and add "ssl://" to the hostname

    // Standard POP3
    $auth_pop3_host = "localhost";
    $auth_pop3_port = 110;

    // *** AUTHENTICATING VIA IMAP ***
    //
    // IMAP support is provided by the Net_IMAP PEAR module
    // http://pear.php.net/package/Net_IMAP
    // If you need ssl support, set the port to 993 and add "ssl://" to the hostname

    // Standard IMAP
    $auth_imap_host = "localhost";
    $auth_imap_port = 143;

    // *** AUTHENTICATING VIA LDAP ***
    //
    // LDAP authentication is provided by client libraries from the
    // OpenLDAP project (ftp://ftp.openldap.org/pub/openldap/openldap-stable.tgz)
    // or the University of Michigan's ldap-3.3 package
    // (ftp://terminator.rs.itd.umich.edu/ldap/ldap-3.3.tar.Z).  One of these
    // must be downloaded, compiled, and installed, and PHP must be rebuilt
    // with the --with-ldap=/path/to/ldap flag.
    //
    // LDAP support code was provided by David Morton <mortonda@osprey.net>.

    // Hostname of your LDAP server
    $auth_ldap_server = "hostname";

    // Password to query the LDAP server (this is NOT the same
    // as the password of the user being authenticated!).
    $auth_ldap_password = "password";
    
    // Use TLS after connecting?  Allowed values = "true" and "false";
    // Note, TLS is only supported in ldap version 3, so set the version appropriately!
    // $auth_ldap_use_tls = "true";
    $auth_ldap_use_tls = "false";
    
    // Set your ldap version (default is 2)
    $auth_ldap_version = 2;

    // Authentication query for users @domain.tld
    // Leave the "%%USER%%" placeholder in the query--this will be replaced
    // by the username when the query is executed.
    $auth_ldap_query = "(|(mailLocalAddress=%%USER%%)(mailLocalAddress=%%USER%%@domain.tld))";

    // Company name, domain name, and top-level domain
    // e.g. "cn=acme, dc=example, dc=com"
    $auth_ldap_bind_dn = "cn=company, dc=domain, dc=tld";

    // Domain and top-level domain, e.g. example.com => "dc=example, dc=com"
    $auth_ldap_base_dn = "dc=domain, dc=tld";

    // Attribute string that describes the name of the LDAP field that will
    // return the user's e-mail address.
    $auth_ldap_attribute = "mailroutingaddress";
    

    // Determines whether the LDAP library automatically follows
    // referrals returned by LDAP servers or not.
    // Active directory seems to need 0 (default is 1)
    $auth_ldap_opt_referrals = 1;


    // *** AUTHENTICATING VIA MICROSOFT EXCHANGE SERVER ***
    //
    // Modern versions of Exchange Server are IMAP-compliant, and
    // should work fine using IMAP authentication, except that an
    // additional "NT Domain" parameter is required.  See the IMAP
    // section above for more information about available option
    // flags.  Comments and user-supplied patches are invited, as
    // I don't have access to such a server to test with.

    // Default NT domain to use if the user leaves the domain
    // field empty.
    $auth_exchange_nt_domain = "NTDomain";

    // Set to True if all your users are part of the same NT domain.
    // If this is the case, there's no need to prompt for this value,
    // the value in $auth_exchange_nt_domain will always be used.
    $auth_exchange_only_one_domain = False;

    // Configure this IMAP connection string to suit the needs of your
    // Exchange Server.  The following placeholders are available:
    //
    //    %%NTDOMAIN%% - user-supplied NT domain, or $auth_exchange_nt_domain
    //    %%USER%%     - user name
    $auth_exchange_params = "{hostname:port/imap/norsh/notls/%%NTDOMAIN%%/%%USER%%}INBOX";


    // *** AUTHENTICATING VIA SQL ***
    //
    // SQL authentication uses the Pear::DB library to look up a
    // username and password against a database table, to return an
    // e-mail address for the user if successful.  The password may
    // be stored in plain text, or hashed via crypt() or MD5.

    // Database connection string to use for authentication.  This may
    // be a different database than the one Maia uses.  The connection
    // string uses the same format as $maia_sql_dsn.
    $auth_sql_dsn = "dbtype://dbuser:passwd@tcp(localhost:3306)/dbname";

    // Name of the table that contains the user's authentication info
    $auth_sql_table = "auth";

    // Name of the column that contains the user's name
    $auth_sql_username_column = "username";

    // Name of the column that contains the user's password
    $auth_sql_password_column = "password";

    // Name of the column that contains the user's e-mail address
    $auth_sql_email_column = "email";

    // Password encryption type:
    //
    //   "plaintext" - no encryption
    //   "md5"       - MD5 hash
    //   "crypt"     - crypt() hash
    $auth_sql_password_type = "plaintext";


    // *** AUTHENTICATING VIA MAIA'S INTERNAL DATABASE ***
    //
    // Authenticating against Maia's internal database allows
    // you to auto-issue random passwords to new users, either
    // automatically when mail arrives for those users, or
    // manually from the User Administration page.
    
    // *** AUTHENTICATING VIA EXTERNAL MECHANISM ***
    //
    // Authenticate with your own external program by setting 
    // $auth_external to the full path of your program.
    // This program must accept a username and password on the command line, 
    // and return 0 if the login is accepted.
    
    $auth_external = "/bin/false";  // "/bin/false" will reject all logins!
                                    // "/bin/true"  will accept all logins!
    

?>
